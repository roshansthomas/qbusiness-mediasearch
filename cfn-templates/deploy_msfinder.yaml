Parameters:
  QBusinessAppId:
    Type: String
    Description: QBusinessAppId

Resources:
  ProjectRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/AdministratorAccess'
  ProjectRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':logs:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':log-group:/aws/codebuild/'
                  - !Ref Project
                  - ':*'
              - !Join
                - ''
                - - 'arn:'
                  - !Ref AWS::Partition
                  - ':logs:'
                  - !Ref AWS::Region
                  - ':'
                  - !Ref AWS::AccountId
                  - ':log-group:/aws/codebuild/'
                  - !Ref Project
          - Action:
              - codebuild:BatchPutCodeCoverages
              - codebuild:BatchPutTestCases
              - codebuild:CreateReport
              - codebuild:CreateReportGroup
              - codebuild:UpdateReport
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:'
                - !Ref AWS::Partition
                - ':codebuild:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':report-group/'
                - !Ref Project
                - '-*'
        Version: '2012-10-17'
      PolicyName: ProjectRoleDefaultPolicy
      Roles:
        - !Ref ProjectRole
  Project:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      Cache:
        Type: NO_CACHE
      EncryptionKey: alias/aws/s3
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: QBUSINESS_APP_ID
            Value: !Ref QBusinessAppId

      ServiceRole: !GetAtt ProjectRole.Arn
      Source:
        BuildSpec: |-
          {
            "version": "0.2",
            "phases": {
              "install": {
                "runtime-versions": {
                  "nodejs": "18"
                },
                "commands": [
                  "npm i -g aws-cdk"
                ],
                "on-failure": "ABORT"
              },
              "build": {
                "commands": [
                  "git clone https://github.com/roshansthomas/qbusiness-mediasearch.git",
                  "cd qbusiness-mediasearch/web_app",
                  "pip install -r requirements.txt",
                  "npm install",
                  "npm run build",
                  "cdk deploy --require-approval never --all --parameters AMAZONQ_APP_ID=$QBUSINESS_APP_ID "
                ]
              }
            }
          }
        Type: NO_SOURCE

  TriggerBuildLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              codebuild = boto3.client('codebuild')
              project_name = event['ResourceProperties']['ProjectName']
              try:
                  codebuild.start_build(projectName=project_name)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, '')
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, '')

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !GetAtt Project.Arn

  TriggerBuild:
    Type: Custom::TriggerBuild
    Properties:
      ServiceToken: !GetAtt TriggerBuildLambda.Arn      
      ProjectName: !Ref Project

Outputs:
  ProjectName:
    Value: !Ref Project